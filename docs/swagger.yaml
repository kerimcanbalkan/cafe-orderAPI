basePath: /api/v1
definitions:
  menu.MenuItem:
    properties:
      category:
        maxLength: 60
        minLength: 2
        type: string
      description:
        maxLength: 150
        minLength: 5
        type: string
      id:
        type: string
      image:
        type: string
      name:
        maxLength: 60
        minLength: 2
        type: string
      price:
        type: number
    required:
    - category
    - description
    - image
    - name
    - price
    type: object
  order.Order:
    properties:
      closedAt:
        type: string
      closedBy:
        type: string
      createdAt:
        type: string
      handledBy:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/order.OrderItem'
        type: array
      servedAt:
        type: string
      tableId:
        type: string
      totalPrice:
        type: number
    required:
    - items
    type: object
  order.OrderItem:
    properties:
      menuItem:
        $ref: '#/definitions/menu.MenuItem'
      quantity:
        type: integer
    required:
    - quantity
    type: object
  order.orderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/order.OrderItem'
        type: array
    required:
    - items
    type: object
  table.Table:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  user.LoginBody:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: kerimcanbalkan@gmail.com
    name: Kerimcan Balkan
    url: https://github.com/kerimcanbalkan
  description: An API for cafe owners to manage menus, process orders, and oversee
    fulfillment.
  title: Cafe Order API
  version: "1"
paths:
  /events:
    get:
      description: Establishes an SSE connection to receive real-time updates.
      produces:
      - text/event-stream
      responses:
        "200":
          description: SSE stream opened
          schema:
            type: string
      summary: Handle SSE connection
      tags:
      - SSE
  /menu:
    get:
      description: Fetches the entire menu from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of menu items
          schema:
            items:
              $ref: '#/definitions/menu.MenuItem'
            type: array
        "500":
          description: Internal Server Error
      summary: Get all menu items
      tags:
      - menu
    post:
      consumes:
      - multipart/form-data
      description: Adds a new item to the menu with an image upload. Only accessible
        by users with the "admin" role.
      parameters:
      - description: Name of the item
        in: formData
        name: name
        required: true
        type: string
      - description: Description of the item
        in: formData
        name: description
        required: true
        type: string
      - description: Price of the item
        in: formData
        name: price
        required: true
        type: number
      - description: Category of the item
        in: formData
        name: category
        required: true
        type: string
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Item added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Create a new menu item
      tags:
      - menu
  /menu/{id}:
    delete:
      description: Deletes a menu item and its related image. Only accessible by users
        with the "admin" role.
      parameters:
      - description: ID of the menu item to delete
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Menu item not found
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Delete a menu item
      tags:
      - menu
  /menu/images/{filename}:
    get:
      description: Retrieves the image of a menu item by filename. This route is publicly
        accessible.
      parameters:
      - description: Filename of the image
        in: path
        name: filename
        required: true
        type: string
      responses:
        "200":
          description: Image file
          schema:
            type: file
        "404":
          description: Image not found
        "500":
          description: Internal Server Error
      summary: Get the image of a menu item
      tags:
      - menu
  /order:
    get:
      description: Retrieves all orders for admin, cashier, and waiter roles
      parameters:
      - description: Filter by closed status (true/false)
        in: query
        name: is_closed
        type: boolean
      - description: Filter by served status (true/false)
        in: query
        name: served
        type: boolean
      - description: Filter by table number
        in: query
        name: table
        type: integer
      - description: Filter by order date (YYYY-MM-DD)
        in: query
        name: date
        type: string
      responses:
        "200":
          description: List of orders with their IDs
          schema:
            items:
              $ref: '#/definitions/order.Order'
            type: array
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Get all orders
      tags:
      - order
  /order/{id}:
    patch:
      description: Allows admin, cashier, and waiter roles to update an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order update details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order.orderRequest'
      responses:
        "200":
          description: Order updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
        "404":
          description: Order not found
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Update an existing order
      tags:
      - order
  /order/{table}:
    post:
      description: Creates a new order for a specific table and saves it in the database
      parameters:
      - description: Table number
        in: path
        name: table
        required: true
        type: integer
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order.orderRequest'
      responses:
        "200":
          description: Order created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
        "500":
          description: Internal Server Error
      summary: Create a new order
      tags:
      - order
  /order/complete/{id}:
    patch:
      description: Allows admin and cashier roles to mark an order as complete
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Order completed successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Mark an order as complete
      tags:
      - order
  /order/serve/{id}:
    patch:
      description: Allows admin and waiter roles to mark an order as served
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Order served successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Mark an order as served
      tags:
      - order
  /order/stats:
    get:
      consumes:
      - application/json
      description: Fetches statistics for a specific date range.
      parameters:
      - description: 'The date for which to fetch the statistics (format: yyyy-mm-dd).
          Defaults to today''s date if not provided.'
        in: query
        name: from
        type: string
      - description: 'The date for which to fetch the statistics (format: yyyy-mm-dd).
          Defaults to today''s date if not provided.'
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order statistics data
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid date format
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to fetch statistics
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerToken: []
      summary: Get statistics for a given date range.
      tags:
      - Statistics
  /table:
    get:
      description: Fetches the tables from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of tables
          schema:
            items:
              $ref: '#/definitions/table.Table'
            type: array
        "500":
          description: Internal Server Error
      summary: Get all tables
      tags:
      - table
    post:
      description: Creates a new table with a name and assigns a uniqueCode name to
        it
      parameters:
      - description: Table object to create
        in: body
        name: table
        required: true
        schema:
          $ref: '#/definitions/table.Table'
      responses:
        "200":
          description: Table created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
        "500":
          description: Internal Server Error
      summary: Create a new table
      tags:
      - table
  /table/{id}:
    delete:
      description: Allows admin role to delete a table by their ID
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Table deleted successfully
        "400":
          description: Invalid ID
        "404":
          description: Table not found
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Delete a table
      tags:
      - table
    get:
      consumes:
      - application/json
      description: Allows users to get table data by the ID
      parameters:
      - description: Table ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Table data
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID!
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Table not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get table data for a given ID
      tags:
      - table
  /user:
    get:
      description: Allows admin role to retrieve a list of all users
      responses:
        "200":
          description: List of users
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Retrieve all users
      tags:
      - user
    post:
      description: Allows admin role to create a new user
      parameters:
      - description: Name of the user
        in: formData
        name: name
        required: true
        type: string
      - description: Surname of the user
        in: formData
        name: surname
        required: true
        type: string
      - description: Gender of the user
        in: formData
        name: gender
        required: true
        type: string
      - description: Role of the user (waiter, cashier, admin)
        in: formData
        name: role
        required: true
        type: string
      - description: Email of the user
        in: formData
        name: email
        required: true
        type: string
      - description: Password of the user
        in: formData
        name: password
        required: true
        type: string
      responses:
        "200":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Create a new user
      tags:
      - user
  /user/{id}:
    delete:
      description: Allows admin role to delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: User deleted successfully
        "400":
          description: Invalid ID
        "404":
          description: User not found
        "500":
          description: Internal Server Error
      security:
      - bearerToken: []
      summary: Delete a user
      tags:
      - user
  /user/login:
    post:
      description: Allows users to log in by providing username and password
      parameters:
      - description: Login details
        in: body
        name: loginBody
        required: true
        schema:
          $ref: '#/definitions/user.LoginBody'
      responses:
        "200":
          description: JWT token and expiration time
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: User login
      tags:
      - user
  /users/{id}/stats:
    get:
      consumes:
      - application/json
      description: Allows admins to retrieve all user statistics. Regular users can
        only retrieve their own statistics.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Start date (YYYY-MM-DD). Defaults to today.
        in: query
        name: from
        type: string
      - description: End date (YYYY-MM-DD). Defaults to today.
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Statistics data
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerToken: []
      summary: Get user statistics for a given date range
      tags:
      - user
securityDefinitions:
  bearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
